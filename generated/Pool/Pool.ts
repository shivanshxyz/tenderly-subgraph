// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AssetAdded extends ethereum.Event {
  get params(): AssetAdded__Params {
    return new AssetAdded__Params(this);
  }
}

export class AssetAdded__Params {
  _event: AssetAdded;

  constructor(event: AssetAdded) {
    this._event = event;
  }

  get assetAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assetId(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Commitment extends ethereum.Event {
  get params(): Commitment__Params {
    return new Commitment__Params(this);
  }
}

export class Commitment__Params {
  _event: Commitment;

  constructor(event: Commitment) {
    this._event = event;
  }

  get leafIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get commitment(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NullifierMarked extends ethereum.Event {
  get params(): NullifierMarked__Params {
    return new NullifierMarked__Params(this);
  }
}

export class NullifierMarked__Params {
  _event: NullifierMarked;

  constructor(event: NullifierMarked) {
    this._event = event;
  }

  get nullifier(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Receipt extends ethereum.Event {
  get params(): Receipt__Params {
    return new Receipt__Params(this);
  }
}

export class Receipt__Params {
  _event: Receipt;

  constructor(event: Receipt) {
    this._event = event;
  }

  get txType(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get revokerId(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get lastLeafIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get target(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get feeAssetId(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get feeValue(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get paymaster(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get assetMemo(): Bytes {
    return this._event.parameters[7].value.toBytes();
  }

  get complianceMemo(): Bytes {
    return this._event.parameters[8].value.toBytes();
  }

  get noteMemos(): Array<Bytes> {
    return this._event.parameters[9].value.toBytesArray();
  }
}

export class RegisterAddress extends ethereum.Event {
  get params(): RegisterAddress__Params {
    return new RegisterAddress__Params(this);
  }
}

export class RegisterAddress__Params {
  _event: RegisterAddress;

  constructor(event: RegisterAddress) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addr(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get leafIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get publicKeys(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class RevokerRegistered extends ethereum.Event {
  get params(): RevokerRegistered__Params {
    return new RevokerRegistered__Params(this);
  }
}

export class RevokerRegistered__Params {
  _event: RevokerRegistered;

  constructor(event: RevokerRegistered) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get revokerPublicKey(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get encryptionPublicKey(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get metadata(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class RevokerStatusUpdated extends ethereum.Event {
  get params(): RevokerStatusUpdated__Params {
    return new RevokerStatusUpdated__Params(this);
  }
}

export class RevokerStatusUpdated__Params {
  _event: RevokerStatusUpdated;

  constructor(event: RevokerStatusUpdated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Pool__getAssetResultValue0Struct extends ethereum.Tuple {
  get id(): i32 {
    return this[0].toI32();
  }

  get assetType(): i32 {
    return this[1].toI32();
  }

  get assetAddress(): Address {
    return this[2].toAddress();
  }

  get isSupported(): boolean {
    return this[3].toBoolean();
  }
}

export class Pool__getAsset1ResultValue0Struct extends ethereum.Tuple {
  get id(): i32 {
    return this[0].toI32();
  }

  get assetType(): i32 {
    return this[1].toI32();
  }

  get assetAddress(): Address {
    return this[2].toAddress();
  }

  get isSupported(): boolean {
    return this[3].toBoolean();
  }
}

export class Pool__getRevokerDataResultValue0Struct extends ethereum.Tuple {
  get id(): i32 {
    return this[0].toI32();
  }

  get isActive(): boolean {
    return this[1].toBoolean();
  }

  get revokerPublicKey(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get encryptionPublicKey(): Array<BigInt> {
    return this[3].toBigIntArray();
  }
}

export class Pool__verifyTransactionProofInputZtxStruct extends ethereum.Tuple {
  get txType(): i32 {
    return this[0].toI32();
  }

  get revokerId(): i32 {
    return this[1].toI32();
  }

  get addressTreeRoot(): BigInt {
    return this[2].toBigInt();
  }

  get commitmentTreeRoot(): BigInt {
    return this[3].toBigInt();
  }

  get feeData(): BigInt {
    return this[4].toBigInt();
  }

  get pubAssets(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get nullifiers(): Array<BigInt> {
    return this[6].toBigIntArray();
  }

  get commitments(): Array<BigInt> {
    return this[7].toBigIntArray();
  }

  get proof(): Bytes {
    return this[8].toBytes();
  }

  get noteMemos(): Array<Bytes> {
    return this[9].toBytesArray();
  }

  get assetMemo(): Bytes {
    return this[10].toBytes();
  }

  get complianceMemo(): Bytes {
    return this[11].toBytes();
  }

  get targetData(): Bytes {
    return this[12].toBytes();
  }

  get refundData(): Bytes {
    return this[13].toBytes();
  }
}

export class Pool extends ethereum.SmartContract {
  static bind(address: Address): Pool {
    return new Pool("Pool", address);
  }

  FIELD_SIZE(): BigInt {
    let result = super.call("FIELD_SIZE", "FIELD_SIZE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FIELD_SIZE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("FIELD_SIZE", "FIELD_SIZE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ZERO_LEAF(): BigInt {
    let result = super.call("ZERO_LEAF", "ZERO_LEAF():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ZERO_LEAF(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ZERO_LEAF", "ZERO_LEAF():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  adaptorHandler(): Address {
    let result = super.call("adaptorHandler", "adaptorHandler():(address)", []);

    return result[0].toAddress();
  }

  try_adaptorHandler(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "adaptorHandler",
      "adaptorHandler():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  areMarkedNullifiers(nullifiers: Array<BigInt>): Array<boolean> {
    let result = super.call(
      "areMarkedNullifiers",
      "areMarkedNullifiers(uint256[]):(bool[])",
      [ethereum.Value.fromUnsignedBigIntArray(nullifiers)],
    );

    return result[0].toBooleanArray();
  }

  try_areMarkedNullifiers(
    nullifiers: Array<BigInt>,
  ): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall(
      "areMarkedNullifiers",
      "areMarkedNullifiers(uint256[]):(bool[])",
      [ethereum.Value.fromUnsignedBigIntArray(nullifiers)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }

  assetCount(assetType: i32): i32 {
    let result = super.call("assetCount", "assetCount(uint8):(uint24)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(assetType)),
    ]);

    return result[0].toI32();
  }

  try_assetCount(assetType: i32): ethereum.CallResult<i32> {
    let result = super.tryCall("assetCount", "assetCount(uint8):(uint24)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(assetType)),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getAddressTreeDepth(): BigInt {
    let result = super.call(
      "getAddressTreeDepth",
      "getAddressTreeDepth():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getAddressTreeDepth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAddressTreeDepth",
      "getAddressTreeDepth():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAsset(assetId: i32): Pool__getAssetResultValue0Struct {
    let result = super.call(
      "getAsset",
      "getAsset(uint24):((uint24,uint8,address,bool))",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(assetId))],
    );

    return changetype<Pool__getAssetResultValue0Struct>(result[0].toTuple());
  }

  try_getAsset(
    assetId: i32,
  ): ethereum.CallResult<Pool__getAssetResultValue0Struct> {
    let result = super.tryCall(
      "getAsset",
      "getAsset(uint24):((uint24,uint8,address,bool))",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(assetId))],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Pool__getAssetResultValue0Struct>(value[0].toTuple()),
    );
  }

  getAsset1(assetAddress: Address): Pool__getAsset1ResultValue0Struct {
    let result = super.call(
      "getAsset",
      "getAsset(address):((uint24,uint8,address,bool))",
      [ethereum.Value.fromAddress(assetAddress)],
    );

    return changetype<Pool__getAsset1ResultValue0Struct>(result[0].toTuple());
  }

  try_getAsset1(
    assetAddress: Address,
  ): ethereum.CallResult<Pool__getAsset1ResultValue0Struct> {
    let result = super.tryCall(
      "getAsset",
      "getAsset(address):((uint24,uint8,address,bool))",
      [ethereum.Value.fromAddress(assetAddress)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Pool__getAsset1ResultValue0Struct>(value[0].toTuple()),
    );
  }

  getCommitmentTreeCurrentRootIndex(): BigInt {
    let result = super.call(
      "getCommitmentTreeCurrentRootIndex",
      "getCommitmentTreeCurrentRootIndex():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getCommitmentTreeCurrentRootIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCommitmentTreeCurrentRootIndex",
      "getCommitmentTreeCurrentRootIndex():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCommitmentTreeDepth(): BigInt {
    let result = super.call(
      "getCommitmentTreeDepth",
      "getCommitmentTreeDepth():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getCommitmentTreeDepth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCommitmentTreeDepth",
      "getCommitmentTreeDepth():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCommitmentTreeLastRoot(): BigInt {
    let result = super.call(
      "getCommitmentTreeLastRoot",
      "getCommitmentTreeLastRoot():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getCommitmentTreeLastRoot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCommitmentTreeLastRoot",
      "getCommitmentTreeLastRoot():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCommitmentTreeNextLeafIndex(): BigInt {
    let result = super.call(
      "getCommitmentTreeNextLeafIndex",
      "getCommitmentTreeNextLeafIndex():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getCommitmentTreeNextLeafIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCommitmentTreeNextLeafIndex",
      "getCommitmentTreeNextLeafIndex():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPaymasterFee(assertId: i32): BigInt {
    let result = super.call(
      "getPaymasterFee",
      "getPaymasterFee(uint24):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(assertId))],
    );

    return result[0].toBigInt();
  }

  try_getPaymasterFee(assertId: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPaymasterFee",
      "getPaymasterFee(uint24):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(assertId))],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRevokerData(id: BigInt): Pool__getRevokerDataResultValue0Struct {
    let result = super.call(
      "getRevokerData",
      "getRevokerData(uint256):((uint16,bool,uint256[2],uint256[2]))",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return changetype<Pool__getRevokerDataResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getRevokerData(
    id: BigInt,
  ): ethereum.CallResult<Pool__getRevokerDataResultValue0Struct> {
    let result = super.tryCall(
      "getRevokerData",
      "getRevokerData(uint256):((uint16,bool,uint256[2],uint256[2]))",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Pool__getRevokerDataResultValue0Struct>(value[0].toTuple()),
    );
  }

  isAdaptorSupported(adaptorAddress: Address): boolean {
    let result = super.call(
      "isAdaptorSupported",
      "isAdaptorSupported(address):(bool)",
      [ethereum.Value.fromAddress(adaptorAddress)],
    );

    return result[0].toBoolean();
  }

  try_isAdaptorSupported(
    adaptorAddress: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAdaptorSupported",
      "isAdaptorSupported(address):(bool)",
      [ethereum.Value.fromAddress(adaptorAddress)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAssetSupported(assetAddress: Address): boolean {
    let result = super.call(
      "isAssetSupported",
      "isAssetSupported(address):(bool)",
      [ethereum.Value.fromAddress(assetAddress)],
    );

    return result[0].toBoolean();
  }

  try_isAssetSupported(assetAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAssetSupported",
      "isAssetSupported(address):(bool)",
      [ethereum.Value.fromAddress(assetAddress)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isKnownRoot(root: BigInt): boolean {
    let result = super.call("isKnownRoot", "isKnownRoot(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(root),
    ]);

    return result[0].toBoolean();
  }

  try_isKnownRoot(root: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isKnownRoot", "isKnownRoot(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(root),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMarkedNullifier(nullifier: BigInt): boolean {
    let result = super.call(
      "isMarkedNullifier",
      "isMarkedNullifier(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(nullifier)],
    );

    return result[0].toBoolean();
  }

  try_isMarkedNullifier(nullifier: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMarkedNullifier",
      "isMarkedNullifier(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(nullifier)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  sanctionScreener(): Address {
    let result = super.call(
      "sanctionScreener",
      "sanctionScreener():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_sanctionScreener(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "sanctionScreener",
      "sanctionScreener():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  verifier(): Address {
    let result = super.call("verifier", "verifier():(address)", []);

    return result[0].toAddress();
  }

  try_verifier(): ethereum.CallResult<Address> {
    let result = super.tryCall("verifier", "verifier():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  verifyTransactionProof(
    ztx: Pool__verifyTransactionProofInputZtxStruct,
  ): boolean {
    let result = super.call(
      "verifyTransactionProof",
      "verifyTransactionProof((uint8,uint16,uint256,uint256,uint256,uint248[],uint256[],uint256[],bytes,bytes[],bytes,bytes,bytes,bytes)):(bool)",
      [ethereum.Value.fromTuple(ztx)],
    );

    return result[0].toBoolean();
  }

  try_verifyTransactionProof(
    ztx: Pool__verifyTransactionProofInputZtxStruct,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyTransactionProof",
      "verifyTransactionProof((uint8,uint16,uint256,uint256,uint256,uint248[],uint256[],uint256[],bytes,bytes[],bytes,bytes,bytes,bytes)):(bool)",
      [ethereum.Value.fromTuple(ztx)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  zeroes(level: BigInt): BigInt {
    let result = super.call("zeroes", "zeroes(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(level),
    ]);

    return result[0].toBigInt();
  }

  try_zeroes(level: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("zeroes", "zeroes(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(level),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddAdaptorSupportCall extends ethereum.Call {
  get inputs(): AddAdaptorSupportCall__Inputs {
    return new AddAdaptorSupportCall__Inputs(this);
  }

  get outputs(): AddAdaptorSupportCall__Outputs {
    return new AddAdaptorSupportCall__Outputs(this);
  }
}

export class AddAdaptorSupportCall__Inputs {
  _call: AddAdaptorSupportCall;

  constructor(call: AddAdaptorSupportCall) {
    this._call = call;
  }

  get adaptorAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get enable(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class AddAdaptorSupportCall__Outputs {
  _call: AddAdaptorSupportCall;

  constructor(call: AddAdaptorSupportCall) {
    this._call = call;
  }
}

export class AddAssetsCall extends ethereum.Call {
  get inputs(): AddAssetsCall__Inputs {
    return new AddAssetsCall__Inputs(this);
  }

  get outputs(): AddAssetsCall__Outputs {
    return new AddAssetsCall__Outputs(this);
  }
}

export class AddAssetsCall__Inputs {
  _call: AddAssetsCall;

  constructor(call: AddAssetsCall) {
    this._call = call;
  }

  get assetType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get assetAddresses(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class AddAssetsCall__Outputs {
  _call: AddAssetsCall;

  constructor(call: AddAssetsCall) {
    this._call = call;
  }
}

export class ClaimPaymasterFeeCollectedCall extends ethereum.Call {
  get inputs(): ClaimPaymasterFeeCollectedCall__Inputs {
    return new ClaimPaymasterFeeCollectedCall__Inputs(this);
  }

  get outputs(): ClaimPaymasterFeeCollectedCall__Outputs {
    return new ClaimPaymasterFeeCollectedCall__Outputs(this);
  }
}

export class ClaimPaymasterFeeCollectedCall__Inputs {
  _call: ClaimPaymasterFeeCollectedCall;

  constructor(call: ClaimPaymasterFeeCollectedCall) {
    this._call = call;
  }

  get assetId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class ClaimPaymasterFeeCollectedCall__Outputs {
  _call: ClaimPaymasterFeeCollectedCall;

  constructor(call: ClaimPaymasterFeeCollectedCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get addressTreeDepth(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get commitmentTreeDepth(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get verifier_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get adaptorHandler_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RegisterAddressCall extends ethereum.Call {
  get inputs(): RegisterAddressCall__Inputs {
    return new RegisterAddressCall__Inputs(this);
  }

  get outputs(): RegisterAddressCall__Outputs {
    return new RegisterAddressCall__Outputs(this);
  }
}

export class RegisterAddressCall__Inputs {
  _call: RegisterAddressCall;

  constructor(call: RegisterAddressCall) {
    this._call = call;
  }

  get addr(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get publicKeys(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RegisterAddressCall__Outputs {
  _call: RegisterAddressCall;

  constructor(call: RegisterAddressCall) {
    this._call = call;
  }
}

export class RegisterRevokerCall extends ethereum.Call {
  get inputs(): RegisterRevokerCall__Inputs {
    return new RegisterRevokerCall__Inputs(this);
  }

  get outputs(): RegisterRevokerCall__Outputs {
    return new RegisterRevokerCall__Outputs(this);
  }
}

export class RegisterRevokerCall__Inputs {
  _call: RegisterRevokerCall;

  constructor(call: RegisterRevokerCall) {
    this._call = call;
  }

  get revokerPublicKey(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get encryptionPublicKey(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get revokerMetadata(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class RegisterRevokerCall__Outputs {
  _call: RegisterRevokerCall;

  constructor(call: RegisterRevokerCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetRevokerStatusCall extends ethereum.Call {
  get inputs(): SetRevokerStatusCall__Inputs {
    return new SetRevokerStatusCall__Inputs(this);
  }

  get outputs(): SetRevokerStatusCall__Outputs {
    return new SetRevokerStatusCall__Outputs(this);
  }
}

export class SetRevokerStatusCall__Inputs {
  _call: SetRevokerStatusCall;

  constructor(call: SetRevokerStatusCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get isActive(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetRevokerStatusCall__Outputs {
  _call: SetRevokerStatusCall;

  constructor(call: SetRevokerStatusCall) {
    this._call = call;
  }
}

export class SetSanctionScreenerCall extends ethereum.Call {
  get inputs(): SetSanctionScreenerCall__Inputs {
    return new SetSanctionScreenerCall__Inputs(this);
  }

  get outputs(): SetSanctionScreenerCall__Outputs {
    return new SetSanctionScreenerCall__Outputs(this);
  }
}

export class SetSanctionScreenerCall__Inputs {
  _call: SetSanctionScreenerCall;

  constructor(call: SetSanctionScreenerCall) {
    this._call = call;
  }

  get screener(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSanctionScreenerCall__Outputs {
  _call: SetSanctionScreenerCall;

  constructor(call: SetSanctionScreenerCall) {
    this._call = call;
  }
}

export class TransactCall extends ethereum.Call {
  get inputs(): TransactCall__Inputs {
    return new TransactCall__Inputs(this);
  }

  get outputs(): TransactCall__Outputs {
    return new TransactCall__Outputs(this);
  }
}

export class TransactCall__Inputs {
  _call: TransactCall;

  constructor(call: TransactCall) {
    this._call = call;
  }

  get ztx(): TransactCallZtxStruct {
    return changetype<TransactCallZtxStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class TransactCall__Outputs {
  _call: TransactCall;

  constructor(call: TransactCall) {
    this._call = call;
  }
}

export class TransactCallZtxStruct extends ethereum.Tuple {
  get txType(): i32 {
    return this[0].toI32();
  }

  get revokerId(): i32 {
    return this[1].toI32();
  }

  get addressTreeRoot(): BigInt {
    return this[2].toBigInt();
  }

  get commitmentTreeRoot(): BigInt {
    return this[3].toBigInt();
  }

  get feeData(): BigInt {
    return this[4].toBigInt();
  }

  get pubAssets(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get nullifiers(): Array<BigInt> {
    return this[6].toBigIntArray();
  }

  get commitments(): Array<BigInt> {
    return this[7].toBigIntArray();
  }

  get proof(): Bytes {
    return this[8].toBytes();
  }

  get noteMemos(): Array<Bytes> {
    return this[9].toBytesArray();
  }

  get assetMemo(): Bytes {
    return this[10].toBytes();
  }

  get complianceMemo(): Bytes {
    return this[11].toBytes();
  }

  get targetData(): Bytes {
    return this[12].toBytes();
  }

  get refundData(): Bytes {
    return this[13].toBytes();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
